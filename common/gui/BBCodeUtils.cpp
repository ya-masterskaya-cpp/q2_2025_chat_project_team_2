#include "BBCodeUtils.h"

namespace gui {
namespace bbcode {

//std::vector<Smiley> GetSmileys() {
//    return {
//        { ":smile:", wxString::FromUTF8("üòä") },
//        { ":laugh:", wxString::FromUTF8("üòÇ") },
//        { ":heart:", wxString::FromUTF8("‚ù§Ô∏è") },
//        { ":thumbup:", wxString::FromUTF8("üëç") },
//        { ":wave:", wxString::FromUTF8("üëã") },
//        { ":party:", wxString::FromUTF8("üéâ") },
//        { ":thinking:", wxString::FromUTF8("ü§î") },
//        { ":cool:", wxString::FromUTF8("üòé") },
//        { ":rofl:", wxString::FromUTF8("ü§£") },
//        { ":love:", wxString::FromUTF8("üòç") },
//        { ":cry:", wxString::FromUTF8("üò¢") },
//        { ":angry:", wxString::FromUTF8("üò†") },
//        { ":clap:", wxString::FromUTF8("üëè" )},
//        { ":pray:", wxString::FromUTF8("üôè") },
//        { ":strong:", wxString::FromUTF8("üí™") },
//        { ":eyes:", wxString::FromUTF8("üëÄ") },
//        { ":target:", wxString::FromUTF8("üéØ") },
//        { ":fire:", wxString::FromUTF8("üî•") },
//        { ":rainbow:", wxString::FromUTF8("üåà") },
//        { ":star:", wxString::FromUTF8("‚≠ê") }
//    };
//}

std::vector<Smiley> GetSmileys() {
    return {
        { wxString::FromUTF8("üòä"), "[smile]", "", wxString::FromUTF8("–£–ª—ã–±–∫–∞") },
        { wxString::FromUTF8("üòÇ"), "[laugh]", "", wxString::FromUTF8("–°–º–µ—Ö") },
        { wxString::FromUTF8("üò¢"), "[cry]", "", wxString::FromUTF8("–ü–ª–∞—á") },
        { wxString::FromUTF8("üò†"), "[angry]", "", wxString::FromUTF8("–ó–ª–æ—Å—Ç—å") },
        { wxString::FromUTF8("üòç"), "[love]", "", wxString::FromUTF8("–í–ª—é–±–ª–µ–Ω–Ω–æ—Å—Ç—å") },
        { wxString::FromUTF8("üòé"), "[cool]", "", wxString::FromUTF8("–ö—Ä—É—Ç–æ") },
        { wxString::FromUTF8("ü§î"), "[think]", "", wxString::FromUTF8("–†–∞–∑–º—ã—à–ª–µ–Ω–∏–µ") },
        { wxString::FromUTF8("üëç"), "[thumbsup]", "", wxString::FromUTF8("–û–¥–æ–±—Ä–µ–Ω–∏–µ") },
        { wxString::FromUTF8("üëé"), "[thumbsdown]", "", wxString::FromUTF8("–ù–µ–æ–¥–æ–±—Ä–µ–Ω–∏–µ") },
        { wxString::FromUTF8("‚ù§Ô∏è"), "[heart]", "", wxString::FromUTF8("–°–µ—Ä–¥—Ü–µ") },
        { wxString::FromUTF8("üéâ"), "[party]", "", wxString::FromUTF8("–ü—Ä–∞–∑–¥–Ω–∏–∫") },
        { wxString::FromUTF8("üî•"), "[fire]", "", wxString::FromUTF8("–û–≥–æ–Ω—å") },
        // –î–æ–±–∞–≤—å—Ç–µ –±–æ–ª—å—à–µ —Å–º–∞–π–ª–æ–≤ –ø–æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏
    };
}

wxString ConvertRichTextToBBCode(wxRichTextCtrl* ctrl) {
    wxString result;
    wxString full_text = ctrl->GetValue();

    // –ï—Å–ª–∏ —Ç–µ–∫—Å—Ç –ø—É—Å—Ç–æ–π, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Å—Ç—É—é —Å—Ç—Ä–æ–∫—É
    if (full_text.IsEmpty())
        return result;

    while (!full_text.IsEmpty() && (full_text.Last() == '\n' || full_text.Last() == '\r')) {
        full_text.RemoveLast();
    }

    // –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π –±—É—Ñ–µ—Ä –¥–ª—è –Ω–∞–∫–æ–ø–ª–µ–Ω–∏—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Ñ—Ä–∞–≥–º–µ–Ω—Ç–æ–≤
    wxString current_fragment;
    wxRichTextAttr current_style;
    bool has_current_style = false;

    // –ü–µ—Ä–µ–±–∏—Ä–∞–µ–º –≤—Å–µ —Å–∏–º–≤–æ–ª—ã –≤ —Ç–µ–∫—Å—Ç–µ
    for (long pos = 0; pos < full_text.length(); pos++) {
        wxRichTextAttr style;
        bool hasStyle = ctrl->GetStyle(pos, style);

        // –ï—Å–ª–∏ —Å—Ç–∏–ª—å –∏–∑–º–µ–Ω–∏–ª—Å—è –∏–ª–∏ —ç—Ç–æ –ø–µ—Ä–≤—ã–π —Å–∏–º–≤–æ–ª
        if (!has_current_style || !hasStyle || !style.EqPartial(current_style)) {
            // –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–π —Ñ—Ä–∞–≥–º–µ–Ω—Ç —Å —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ–º
            if (!current_fragment.IsEmpty()) {
                // –î–æ–±–∞–≤–ª—è–µ–º –æ—Ç–∫—Ä—ã–≤–∞—é—â–∏–µ —Ç–µ–≥–∏
                if (current_style.GetFontWeight() == wxFONTWEIGHT_BOLD)
                    result += "[b]";
                if (current_style.GetFontStyle() == wxFONTSTYLE_ITALIC)
                    result += "[i]";
                if (current_style.GetFontUnderlined())
                    result += "[u]";

                // –≠–∫—Ä–∞–Ω–∏—Ä—É–µ–º –∏ –¥–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç —Ñ—Ä–∞–≥–º–µ–Ω—Ç–∞
                wxString escaped = current_fragment;
                escaped.Replace("[", "\\[");
                escaped.Replace("]", "\\]");
                escaped.Replace("\\", "\\\\");
                result += escaped;

                // –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–∫—Ä—ã–≤–∞—é—â–∏–µ —Ç–µ–≥–∏
                if (current_style.GetFontUnderlined())
                    result += "[/u]";
                if (current_style.GetFontStyle() == wxFONTSTYLE_ITALIC)
                    result += "[/i]";
                if (current_style.GetFontWeight() == wxFONTWEIGHT_BOLD)
                    result += "[/b]";

                current_fragment.clear();
            }

            // –û–±–Ω–æ–≤–ª—è–µ–º —Ç–µ–∫—É—â–∏–π —Å—Ç–∏–ª—å
            if (hasStyle) {
                current_style = style;
                has_current_style = true;
            }
            else {
                has_current_style = false;
            }
        }

        // –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—É—â–∏–π —Å–∏–º–≤–æ–ª –≤ –Ω–∞–∫–∞–ø–ª–∏–≤–∞–µ–º—ã–π —Ñ—Ä–∞–≥–º–µ–Ω—Ç
        current_fragment += full_text[pos];
    }

    // –î–æ–±–∞–≤–ª—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π —Ñ—Ä–∞–≥–º–µ–Ω—Ç
    if (!current_fragment.IsEmpty()) {
        // –î–æ–±–∞–≤–ª—è–µ–º –æ—Ç–∫—Ä—ã–≤–∞—é—â–∏–µ —Ç–µ–≥–∏
        if (has_current_style) {
            if (current_style.GetFontWeight() == wxFONTWEIGHT_BOLD)
                result += "[b]";
            if (current_style.GetFontStyle() == wxFONTSTYLE_ITALIC)
                result += "[i]";
            if (current_style.GetFontUnderlined())
                result += "[u]";
        }

        // –≠–∫—Ä–∞–Ω–∏—Ä—É–µ–º –∏ –¥–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç —Ñ—Ä–∞–≥–º–µ–Ω—Ç–∞
        wxString escaped = current_fragment;
        escaped.Replace("[", "\\[");
        escaped.Replace("]", "\\]");
        escaped.Replace("\\", "\\\\");
        result += escaped;

        // –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–∫—Ä—ã–≤–∞—é—â–∏–µ —Ç–µ–≥–∏
        if (has_current_style) {
            if (current_style.GetFontUnderlined())
                result += "[/u]";
            if (current_style.GetFontStyle() == wxFONTSTYLE_ITALIC)
                result += "[/i]";
            if (current_style.GetFontWeight() == wxFONTWEIGHT_BOLD)
                result += "[/b]";
        }
    }

    return result;
}

void ParseBBCode(const wxString& text, wxRichTextCtrl* ctrl) {
    // –û—á–∏—Å—Ç–∫–∞ —Å—Ç–∏–ª—è
    wxRichTextAttr attr;
    ctrl->SetDefaultStyle(attr);

    // –ü—Ä–æ—Å—Ç–æ–π –ø–∞—Ä—Å–µ—Ä —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –≤–ª–æ–∂–µ–Ω–Ω–æ—Å—Ç–∏
    size_t pos = 0;
    std::vector<wxString> tagStack;

    while (pos < text.length()) {
        if (text[pos] == '[' && pos + 1 < text.length()) {
            // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–≥–æ–≤
            size_t endTag = text.find(']', pos);
            if (endTag != wxString::npos) {
                wxString tag = text.SubString(pos + 1, endTag - 1);
                pos = endTag + 1;

                if (tag.StartsWith("/")) {
                    // –ó–∞–∫—Ä—ã–≤–∞—é—â–∏–π —Ç–µ–≥
                    if (!tagStack.empty()) {
                        tagStack.pop_back();
                    }

                    // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∏–ª—å –Ω–∞ –æ—Å–Ω–æ–≤–µ –æ—Å—Ç–∞–≤—à–∏—Ö—Å—è —Ç–µ–≥–æ–≤
                    attr = wxRichTextAttr();
                    for (const wxString& openTag : tagStack) {
                        ApplyTag(openTag, attr);
                    }
                    ctrl->SetDefaultStyle(attr);
                }
                else {
                    // –û—Ç–∫—Ä—ã–≤–∞—é—â–∏–π —Ç–µ–≥
                    tagStack.push_back(tag);
                    ApplyTag(tag, attr);
                    ctrl->SetDefaultStyle(attr);
                }
                continue;
            }
        }

        // –û–±—Ä–∞–±–æ—Ç–∫–∞ —ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
        if (text[pos] == '\\' && pos + 1 < text.length()) {
            ctrl->WriteText(wxString(text[pos + 1]));
            pos += 2;
        }
        else {
            ctrl->WriteText(wxString(text[pos]));
            pos++;
        }
    }
}

void ApplyTag(const wxString& tag, wxRichTextAttr& attr) {
    if (tag == "b") {
        attr.SetFontWeight(wxFONTWEIGHT_BOLD);
    }
    else if (tag == "i") {
        attr.SetFontStyle(wxFONTSTYLE_ITALIC);
    }
    else if (tag == "u") {
        attr.SetFontUnderlined(true);
    }
}

} //end namespace bbcode
} //end namespace gui